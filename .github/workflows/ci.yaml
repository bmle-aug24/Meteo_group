# name: CI for Microservices

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main

# jobs:
#   test-and-build:
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         service: [ingest, preprocess, train] # Liste des services

#     steps:
#       # Étape 1 : Récupérer le code source
#       - name: Checkout code
#         uses: actions/checkout@v3

#       # Étape 2 : Installer DVC et récupérer les données depuis DagsHub
#       - name: Install DVC & Pull Data
#         run: |
#           pip install dvc
#           dvc remote add origin https://dagshub.com/bmle-aug24/Meteo_group.dvc
#           dvc remote modify origin auth basic
#           dvc remote modify origin user bmle-aug24
#           dvc remote modify origin password 80f0fd7d1ab6a2b1e95664936d78045d71c78e17
#           dvc pull

#       # Étape 3 : Installer les dépendances Python
#       - name: Install dependencies
#         run: pip install -r ./src/${{ matrix.service }}/requirements.txt

#       # Étape 4 : Exécuter les tests unitaires
#       - name: Run unit tests
#         run: pytest ./src/${{ matrix.service }}/tests_unitaires/ --maxfail=3 --disable-warnings

#       # Étape 5 : Construire les images Docker
#       - name: Build Docker images
#         run: docker build -t ${{ matrix.service }}:local ./src/${{ matrix.service }}


name: CI for Microservices

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.list-services.outputs.services) }}

    needs: list-services
    steps:
      # Étape 1 : Récupérer le code source
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2 : Installer DVC et récupérer les données depuis DagsHub (via GitHub Secrets)
      - name: Install DVC & Pull Data
        env:
          DVC_PASSWORD: ${{ secrets.DVC_PASSWORD }}
        run: |
          pip install dvc
          dvc remote add origin https://dagshub.com/bmle-aug24/Meteo_group.dvc
          dvc remote modify origin auth basic
          dvc remote modify origin user bmle-aug24
          dvc remote modify origin password $DVC_PASSWORD
          dvc pull

      # Étape 3 : Vérification de la présence des fichiers téléchargés
      - name: Debug - Check DVC status
        run: |
          dvc status
          ls -l config/model/

      # Étape 4 : Vérifier si le modèle XGBoost est présent
      - name: Ensure model exists
        run: |
          if [ ! -f config/model/xgboost_model.json ]; then
            echo "ERROR: xgboost_model.json is missing!"
            exit 1
          fi

      # Étape 5 : Installer les dépendances Python
      - name: Install dependencies
        run: pip install -r ./src/${{ matrix.service }}/requirements.txt

      # Étape 6 : Exécuter les tests unitaires avec un rapport de couverture
      - name: Run unit tests with coverage
        run: pytest --cov=./src/${{ matrix.service }} ./src/${{ matrix.service }}/tests_unitaires/ --maxfail=3 --disable-warnings

      # Étape 7 : Construire les images Docker avec cache optimisé
      - name: Build Docker images
        run: docker build --cache-from=type=gha -t ${{ matrix.service }}:local ./src/${{ matrix.service }}

# Job pour détecter dynamiquement les services présents dans le dossier `src/`
  list-services:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.list.outputs.services }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: List Services
        id: list
        run: echo "::set-output name=services::$(ls -d src/*/ | xargs -n 1 basename | jq -R -s -c 'split(\"\\n\")[:-1]')"
    
