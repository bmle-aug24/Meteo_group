name: CI for Microservices

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    # strategy:
    #   matrix:
    #     service: [ingest, preprocess, train] # Liste des services

    steps:
      # Étape 1 : Récupérer le code source
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2 : Installer DVC et récupérer les données depuis DagsHub
      # - name: Install DVC & Pull Data
      #   run: |
      #     pip install dvc
      #     dvc remote add --force origin https://dagshub.com/bmle-aug24/Meteo_group.dvc
      #     dvc remote modify origin auth basic
      #     dvc remote modify origin user bmle-aug24
      #     dvc remote modify origin password "06082024BMLE"
      #     dvc pull --force --jobs 1

      # # Étape 3 : Installer les dépendances Python
      # - name: Install dependencies
      #   run: pip install -r ./src/${{ matrix.service }}/requirements.txt


      # # Étape 4 : Exécuter les tests unitaires
      # - name: Run unit tests
      #   run: pytest ./src/${{ matrix.service }}/tests_unitaires/ --maxfail=3 --disable-warnings

      # # Étape 5 : Construire les images Docker
      # - name: Build Docker images
      #   run: docker build -t ${{ matrix.service }}:local ./src/${{ matrix.service }}






      # Étape 3 : Installer les dépendances Python
      - name: Install dependencies (ingest)
        run: pip install -r ./src/ingest/requirements.txt

      # Étape 5 : Construire les images Docker
      - name: Build Docker images (ingest)
        run: docker build -t ingest-test:local ./src/ingest/

        

# name: CI for Microservices

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main

# jobs:
#   list-services:
#     runs-on: ubuntu-latest
#     outputs:
#       services: ${{ steps.list.outputs.services }}

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: List Services
#         id: list
#         run: |
#           echo "$(ls -d src/*/ | xargs -n 1 basename | jq -R -s -c 'split(\"\\n\")[:-1]')" > services.json
#           echo "::set-output name=services::$(cat services.json)"

#   test-and-build:
#     runs-on: ubuntu-latest
#     needs: list-services
#     strategy:
#       matrix:
#         service: ${{ fromJson(needs.list-services.outputs.services) }}

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Install dependencies
#         run: pip install -r ./src/${{ matrix.service }}/requirements.txt

#       - name: Run unit tests
#         run: pytest ./src/${{ matrix.service }}/tests_unitaires/ --maxfail=3 --disable-warnings

#       - name: Build Docker images
#         run: docker build -t ${{ matrix.service }}:local ./src/${{ matrix.service }}

    
