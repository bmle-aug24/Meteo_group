# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME           - Docker image name used to run Airflow.
#                                Default: apache/airflow:master-python3.8
# AIRFLOW_UID                  - User ID in Airflow containers
#                                Default: 50000
# AIRFLOW_GID                  - Group ID in Airflow containers
#                                Default: 50000
#
# Those configurations are useful mostly in case of standalone testing/running Airflow in test/try-out mode
#
# _AIRFLOW_WWW_USER_USERNAME   - Username for the administrator account (if requested).
#                                Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD   - Password for the administrator account (if requested).
#                                Default: airflow
# _PIP_ADDITIONAL_REQUIREMENTS - Additional PIP requirements to add when starting all containers.
#                                Default: ''
#
# Feel free to modify this file to suit your needs.
---
version: "3"
x-airflow-common: &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.8.1}
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ""
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "false"
    AIRFLOW__API__AUTH_BACKEND: "airflow.api.auth.backend.basic_auth"
    AIRFLOW__SMTP__SMTP_HOST: "smtp.gmail.com"
    AIRFLOW__SMTP__SMTP_PORT: 587
    AIRFLOW__SMTP__SMTP_USER: "${AIRFLOW_SMTP_USER}"
    AIRFLOW__SMTP__SMTP_PASSWORD: "${AIRFLOW_SMTP_PASSWORD}"
    AIRFLOW__SMTP__SMTP_MAIL_FROM: "meteo.bmle.24@gmail.com"
    AIRFLOW__API__ENABLE_EXPERIMENTAL_API: "true"
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:- apache-airflow-providers-docker} 
  
  volumes:
    - ./src/airflow/dags:/opt/airflow/dags
    - ./logs/airflow/:/opt/airflow/logs
    - ./src/airflow/plugins:/opt/airflow/plugins
    - /var/run/docker.sock:/var/run/docker.sock 
  
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
  networks:
    - app_network
    - default

services:
  dvc: # Ajout du service DVC au docker-compose
    image: python:3.9-slim
    volumes:
      - ./data:/app/data
      - ./mlflow:/app/mlflow
      - ./src/dvc/script.sh:/app/script.sh
      #- ./:/app/
    working_dir: /app
    entrypoint: ["/bin/bash", "/app/script.sh"]
    environment:
      - RUN_COMMAND=true
    restart: "no"
#Airflow services
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  redis:
    image: redis:latest
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    volumes:

     - ./src/airflow/dags:/opt/airflow/dags
     - ./logs/airflow/:/opt/airflow/logs
     - ./src/airflow/plugins:/opt/airflow/plugins
     - /var/run/docker.sock:/var/run/docker.sock 
     - ./data:/opt/airflow/data

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"',
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    volumes:

     - ./src/airflow/dags:/opt/airflow/dags
     - ./logs/airflow/:/opt/airflow/logs
     - ./src/airflow/plugins:/opt/airflow/plugins
     - /var/run/docker.sock:/var/run/docker.sock 
     - ./data:/opt/airflow/data 

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    volumes:

      - ./src/airflow/dags:/opt/airflow/dags
      - ./logs/airflow/:/opt/airflow/logs
      - ./src/airflow/plugins:/opt/airflow/plugins
      - /var/run/docker.sock:/var/run/docker.sock  
      - ./data:/opt/airflow/data

  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}

  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  ingestion:
    build:
      context: src/ingest
      dockerfile: Dockerfile
    image: ingestion
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      dvc:
        condition: service_completed_successfully
    volumes:
      - ./data:/app/data   # Correction : accès direct à data
      - ./config:/app/config   # Correction : accès direct à config
  
  mlflow:
    build:
      context: src/mlflow
      dockerfile: Dockerfile
    image: mlflow_service
    volumes:
      - ./mlflow:/app
    ports:
      - 8100:8100
    networks:
      - app_network
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8100/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  preprocessing:
    build:
      context: src/preprocess
      dockerfile: Dockerfile
    image: preprocessing
    volumes:
      - ./data/raw:/app/data/raw
      - ./data/processed:/app/data/processed
      - ./config:/app/config
    networks:
      - app_network
    depends_on:
      mlflow:
        condition: service_healthy
      ingestion:
        condition: service_completed_successfully

  train_service:
    build: 
      context: src/train
      dockerfile: Dockerfile
    image: train_service
    volumes:
      - ./data:/app/data
      - ./config:/app/config
    networks:
      - app_network
    depends_on:
      preprocessing:
        condition: service_completed_successfully
    
  api_prediction:
    build:
      context: src/api_model
      dockerfile: Dockerfile
    image: api_prediction
    volumes:
      - ./data:/app/data
      - ./config:/app/config
      - ./mlflow:/app/model
      - ./mlflow/mlartifact:/app/mlartifacts
    depends_on:
      train_service:
        condition: service_completed_successfully
    ports:
      - "8101:8000"
    networks:
      - app_network
      
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/check"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  gateway:
    build:
      context: src/Gateway
      dockerfile: Dockerfile
    image: gateway
    ports:
      - 8001:8001
    networks:
      - app_network
    depends_on:
      api_prediction:
        condition: service_healthy
  
  streamlit:
    build:
      context: src/streamlit_app
      dockerfile: Dockerfile
    image: streamlit
    ports:
      - 8002:8002
    networks:
      - app_network
    depends_on:
      - gateway

  monitoring:
    build:
      context: src/monitoring
      dockerfile: Dockerfile
    image: monitoring_service
    volumes:
      - ./data:/app/data
      - ./config:/app/config
      - ./logs:/app/logs
    networks:
      - app_network
    depends_on:
      train_service:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "python", "/app/drift_detection.py"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: "no"

volumes:
  postgres-db-volume:

networks:
  app_network:
    driver: bridge

